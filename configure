#!/bin/sh

set -eu

echo(){
	printf '%s\n' "$*"
}

try_path(){
	var="$1"
	separator="$2"
	shift
	for ent in $@
	do
		if test -e "$ent"
		then eval "$var=\"\$$var$separator$ent\""
		fi
	done
}

test_cflag(){
	echo "int main(void){return 0;}" >"$tmpc"
	$CC $CFLAGS_CONFIGURE "$1" "$tmpc" -o "$tmpc.e"
	e=$?
	rm -f "$tmpc.e"
	return $e
}

try_cflag(){
	printf 'checking whether compiler accepts %s... ' "$1"

	if test_cflag "$1" 2>/dev/null
	then
		CFLAGS="$CFLAGS $1"
		echo yes
	else
		echo no
	fi
}

usage(){
	cat >&2 <<!
Usage: $0 [OPTIONS...] [CC/CFLAGS/LDFLAGS=...]

Options:
	--target=..., --host=...    Build for target machine
	--with-ucc-lib              Include and link against local lib/
	--enable-debug              Build with debug symbols [enabled]
	--enable-optimize           Build with optimisations

CC, CFLAGS and LDFLAGS are pulled from the environment if not specified
!
	exit 1
}

# globals
debug=1
optimise=0
target=
CFLAGS_CONFIGURE=

for arg
do
	case "$arg" in
		--target=*|--host=*)
			target=${arg#*=}
			;;

		--enable-debug|--enable-debug=yes) debug=1 ;;
		--disable-debug|--enable-debug=no) debug=0 ;;

		--enable-optimi[sz]e|--enable-optimi[sz]e=yes) optimise=1 ;;
		--disable-optimi[sz]e|--enable-optimi[sz]e=no) optimise=0 ;;

		CC=*) CC=${arg#*=} ;;
		CFLAGS=*) CFLAGS=${arg#*=} ;;
		LDFLAGS=*) LDFLAGS=${arg#*=} ;;

		*)
			usage
			;;
	esac
done

# find temporary file
set +u
test -n "$TMPDIR" || TMPDIR=/tmp
set -u

i=0
while :
do
	tmpc="$TMPDIR/ucc_configure.$$.$i.c"
	set +C
	echo >"$tmpc" && break
	set -C
	if test $i = 100
	then
		echo >&2 "$0: can't create temporary file"
		exit 1
	fi
	i=$(expr $i + 1)
done
test -z "$tmpc" && exit 1
trap "rm -f $tmpc" EXIT

# set CC, CFLAGS and LDFLAGS if they don't exist
set +u
test -n "$CC" || CC=cc
test -n "$CFLAGS" || CFLAGS=
test -n "$LDFLAGS" || LDFLAGS=

# CFLAGS_CONFIGURE inherits command-line CFLAGS and LDFLAGS
CFLAGS_CONFIGURE="$CFLAGS_CONFIGURE $CFLAGS $LDFLAGS"
set -u

printf 'checking target... '
test -n "$target" || target=$($CC -dumpmachine) || target=unknown
printf '%s\n' "$target"
arch="${target%%-*}"

test_cflag -Werror=unknown-warning-option 2>/dev/null \
	&& CFLAGS_CONFIGURE="$CFLAGS_CONFIGURE -Werror=unknown-warning-option"

try_cflag -Wall
try_cflag -Wextra
try_cflag -pedantic


try_cflag -Werror=incompatible-pointer-types
try_cflag -Werror=implicit-function-declaration

try_cflag -Wmissing-prototypes
try_cflag -Wstrict-prototypes

try_cflag -Wno-char-subscripts
try_cflag -Wno-format-extra-args
try_cflag -Wno-missing-braces
try_cflag -Wno-missing-field-initializers
try_cflag -Wno-logical-not-parentheses
try_cflag -Wno-implicit-fallthrough

try_cflag -Wsuggest-attribute=pure
try_cflag -Wsuggest-attribute=const

try_cflag -Werror=incompatible-pointer-types

if test $debug = 1
then
	try_cflag -g
fi

if test $optimise = 1
then
	try_cflag -O
fi

# write configs
printf 'writing src/config.custom.mk... '
cat > src/config.custom.mk <<!
# generated by configure $@

CC = ${CC}
CFLAGS = ${CFLAGS}
LDFLAGS = ${LDFLAGS}
!
echo 'done'

printf 'writing lib/config.mk... '
cat > lib/config.mk <<!
# generated by configure $@

ARCH = $arch
!
echo 'done'

echo "Configured for $target"
