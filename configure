#!/bin/sh

set -eu

echo(){
	printf '%s\n' "$*"
}

trim_first_assign(){
	echo "$1" | cut -d= -f2
}

try_path(){
	var="$1"
	shift
	for ent in $@
	do
		if test -e "$ent"
		then eval "$var=\"\$$var:$ent\""
		fi
	done
}

test_cflag(){
	echo "int main(void){return 0;}" >"$tmpc"
	$CC $CFLAGS_CONFIGURE "$1" "$tmpc" -o /dev/null
	return $?
}

try_cflag(){
	printf 'checking whether compiler accepts %s... ' "$1"

	if test_cflag "$1" 2>/dev/null
	then
		CFLAGS="$CFLAGS $1"
		echo yes
	else
		echo no
	fi
}

usage(){
	cat >&2 <<!
Usage: $0 [OPTIONS...] [CC/CFLAGS/LDFLAGS=...]

Options:
	--target=..., --host=...    Build for target machine
	--with-ucc-lib              Include and link against local lib/
	--enable-debug              Build with debug symbols [enabled]
	--enable-optimize           Build with optimsations

CC, CFLAGS and LDFLAGS are pulled from the environment if not specified
!
	exit 1
}

# globals
local_label_prefix=.L
need_dsym=0
section_text=".text"
section_data=".data"
section_bss=".bss"
section_rodata=".rodata"
section_dbg_abbrev=".debug_abbrev"
section_dbg_info=".debug_info"
section_dbg_line=".debug_line"
dwarf_indirect_section_links=0
asm_weak_directive='weak'
as_supports_local_common=1
leading_underscore=0
local_lib=0

debug=1
optimise=0

include_path="/usr/include"
target=

ucc_cflags=
ucc_cppflags=
ucc_crt=
ucc_dyn=
ucc_stdinc=
ucc_stdlib=
ucc_ldflags=

CFLAGS_CONFIGURE=

for arg
do
	case "$arg" in
		--target=*|--host=*)
			target=${arg#*=}
			;;

		--with-ucc-lib)
			local_lib=1
			;;

		--enable-debug|--enable-debug=yes) debug=1 ;;
		--disable-debug|--enable-debug=no) debug=0 ;;

		--enable-optimi[sz]e|--enable-optimi[sz]e=yes) optimise=1 ;;
		--disable-optimi[sz]e|--enable-optimi[sz]e=no) optimise=0 ;;

		CC=*) CC=${arg#*=} ;;
		CFLAGS=*) CFLAGS=${arg#*=} ;;
		LDFLAGS=*) LDFLAGS=${arg#*=} ;;

		*)
			usage
			;;
	esac
done

# find temporary file
set +u
test -n "$TMPDIR" || TMPDIR=/tmp
set -u

i=0
while :
do
	tmpc="$TMPDIR/ucc_configure.$$.$i.c"
	set +C
	echo >"$tmpc" && break
	set -C
	if test $i = 100
	then
		echo >&2 "$0: can't create temporary file"
		exit 1
	fi
	i=$(expr $i + 1)
done
test -z "$tmpc" && exit 1
trap "rm -f $tmpc" EXIT

# set CC, CFLAGS and LDFLAGS if they don't exist
set +u
test -n "$CC" || CC=cc
test -n "$CFLAGS" || CFLAGS=
test -n "$LDFLAGS" || LDFLAGS=
set -u

printf 'checking target... '
test -n "$target" || target=$($CC -dumpmachine) || target=unknown
printf '%s\n' "$target"
arch="${target%%-*}"

# OS defaults
case "$target" in
	*linux*)
		# assume gcc
		ucc_dyn="-dynamic-linker /lib64/ld-linux-x86-64.so.2"
		ucc_stdlib="-lc"

		try_path ucc_crt /usr/lib/"${target}"/crt1.o
		try_path ucc_crt /usr/lib/"${target}"/crti.o
		try_path ucc_crt /usr/lib/"${target}"/crtn.o

		gcc_inc=$(echo /usr/lib/gcc/$target/*/ | tr ' ' '\n' | sort | tail -1)
		echo "Borrowing gcc-$(basename "$gcc_inc")'s include/"

		try_path ucc_stdinc "/usr/include"
		try_path ucc_stdinc "/usr/include/$target"
		try_path ucc_stdinc "$gcc_inc/include"
		;;

	*freebsd*)
		ucc_crt="/usr/lib/crt1.o:/usr/lib/crti.o:/usr/lib/crtbegin.o:/usr/lib/crtend.o:/usr/lib/crtn.o"
		ucc_stdlib="-lc"
		;;

	*-apple-*)
		section_text="__TEXT,__text"
		section_data="__DATA,__data"
		section_bss="__BSS,__bss"
		section_rodata="__TEXT,__const"
		section_dbg_abbrev="__DWARF,__debug_abbrev,regular,debug"
		section_dbg_info="__DWARF,__debug_info,regular,debug"
		section_dbg_line="__DWARF,__debug_line,regular,debug"
		dwarf_indirect_section_links=1

		asm_weak_directive='weak_reference'
		# Darwin also needs "-flat_namespace -undefined suppress"
		as_supports_local_common=0
		ucc_cflags='-mpreferred-stack-boundary=4' # 2^4 = 16 byte aligned
		ucc_stdlib='-lSystem'
		ucc_crt='-lcrt1.o'
		ucc_stdinc='/usr/include'
		syslibroot=$(ls -d /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX*.sdk | head -1)
		ucc_ldflags="-macosx_version_min 10.5 -syslibroot $syslibroot"
		local_label_prefix=L
		need_dsym=1
		leading_underscore=1
		;;

	CYGWIN_NT-* | *-pc-cygwin)
		leading_underscore=1
		if test "$arch" = i686
		then arch=x86_64
		fi
		;;

	*)
		echo "$0: unknown target ($target)" >&2
		exit 1
		;;
esac

# platform/ABI setup
if test $leading_underscore = 1
then
	ucc_cppflags="-D__LEADING_UNDERSCORE $ucc_cppflags"
	ucc_cflags="-fleading-underscore $ucc_cflags"
fi

case "$target" in
	*arm*)
		ucc_cflags="-fshort-enums $ucc_cflags"
		;;
esac

if test $local_lib = 1
then
	ucc_stdinc="lib/"
	ucc_crt="lib/crt.a"
	ucc_stdlib="lib/libc.a"
	ucc_dyn=''
fi

test_cflag -Werror=unknown-warning-option 2>/dev/null \
	&& CFLAGS_CONFIGURE="$CFLAGS_CONFIGURE -Werror=unknown-warning-option"

try_cflag -std=c99

try_cflag -Wall
try_cflag -Wextra
try_cflag -pedantic

try_cflag -Wmissing-prototypes
try_cflag -Wstrict-prototypes

try_cflag -Wno-char-subscripts
try_cflag -Wno-format-extra-args
try_cflag -Wno-missing-braces
try_cflag -Wno-missing-field-initializers
try_cflag -Wno-logical-not-parentheses

if test $debug = 1
then
	CFLAGS="$CFLAGS -g"
fi

if test $optimise = 1
then
	try_cflag -O
fi

# write configs
printf 'writing config.mk... '
cat > src/config.mk <<!
# generated by configure $@

CC = ${CC}
CFLAGS = ${CFLAGS}
LDFLAGS = ${LDFLAGS}

ARCH = $arch
TARGET = $target
!
echo 'done'

printf 'writing config_driver.h... '
cat > src/config_driver.h <<!
/* generated by configure $@ */

#define NEED_DSYM $need_dsym

#define UCC_AS       "as"

#define UCC_CPPFLAGS "${ucc_cppflags}"
#define UCC_CFLAGS   "${ucc_cflags}"
#define UCC_LDFLAGS  "${ucc_ldflags} ${ucc_dyn}"

#define UCC_STDINC  "${ucc_stdinc}"
#define UCC_STDLIB "${ucc_stdlib}"
#define UCC_CRT    "${ucc_crt}"
!
echo 'done'

printf 'writing config_as.h... '
cat > src/config_as.h <<!
/* generated by configure $@ */

#define SECTION_NAME_TEXT $section_text
#define SECTION_NAME_DATA $section_data
#define SECTION_NAME_BSS  $section_bss
#define SECTION_NAME_RODATA $section_rodata
#define SECTION_NAME_DBG_ABBREV $section_dbg_abbrev
#define SECTION_NAME_DBG_INFO $section_dbg_info
#define SECTION_NAME_DBG_LINE $section_dbg_line
#define DWARF_INDIRECT_SECTION_LINKS $dwarf_indirect_section_links
#define ASM_PLBL_PRE "$local_label_prefix"
#define ASM_WEAK_DIRECTIVE "$asm_weak_directive"
#define AS_SUPPORTS_LOCAL_COMMON $as_supports_local_common
!
echo 'done'

echo "Configured for $target"
