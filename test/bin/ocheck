#!/usr/bin/perl
use warnings;
use strict;

use Config '%Config';

my $verbose = 0;
my %sigmap;
my @signames = split " ", $Config{sig_name};
for my $n (split " ", $Config{sig_num}){
	$sigmap{$n} = $signames[$n];
}

sub signame
{
	my $n = shift();
	my $name = $sigmap{$n};
	return $name if $name;
	return "<unknown signal>";
}

sub env_append
{
	my($name, $obj) = @_;

	if($ENV{$name}){
		$ENV{$name} .= ":$obj";
	}else{
		$ENV{$name} = "$obj";
	}
}

sub randstack_to_env
{
	my $obj = $ENV{UCC_RANDSTACK_LIB};
	if(!$obj){
		return;
	}
	if(!-e $obj){
		die "$0: \$UCC_RANDSTACK_LIB doesn't exist";
	}

	env_append('LD_PRELOAD', $obj);
	env_append('DYLD_INSERT_LIBRARIES', $obj);
}

die "Usage: $0 exit-code program [args...]\n"
unless @ARGV;

my $expected = shift();
my $expected_signal = 0;
my @unlinks;

if($expected =~ /^SIG[A-Z]+$/){
	$expected_signal = 1;
	$expected =~ s/^SIG//;
}elsif($expected =~ /^[0-9]+$/){
	# fine
}else{
	die "\"$expected\" not numeric, nor a signal";
}

my($cmd, @args) = @ARGV;

if(!-x $cmd){
	# we've been passed a source file
	my $ucc = $ENV{UCC};
	die "$0: no \$UCC" unless $ucc;

	my $tmp = "$ENV{UCC_TESTDIR}/$$.retcheck-exe";

	my @cmd = ($ucc, '-o', $tmp, $cmd, @args);
	print "$0: run: @cmd\n" if exists $ENV{UCC_VERBOSE};
	die "$0: couldn't compile\n" if system(@cmd);
	$cmd = $tmp;
}

randstack_to_env();
print "$0: run: $cmd\n" if exists $ENV{UCC_VERBOSE};
my $r = system($cmd);
my $got_exitcode = $r >> 8;
my $got_signal = $r & 127;
if($got_signal){
	my $SAVE = $got_signal;
	$got_signal = signame($got_signal);
}

if($expected_signal){
	if(!$got_signal){
		die "$0: expected signal $expected, got exit code $got_exitcode, from @ARGV\n";
	}

	if(!($got_signal eq $expected)){
		die "$0: expected signal $expected, got signal $got_signal, from @ARGV\n";
	}
}else{
	if($got_signal){
		die "$0: expected exit code $expected, got signal $got_signal, from @ARGV\n";
	}

	if($expected != $got_exitcode){
		die "$0: expected exit code $expected, got exit code $got_exitcode, from @ARGV\n";
	}
}
