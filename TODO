updated bugs/ and test/

---------------------------------------------------- cc1

int x[] -> NULL init, not 0

floats, long + short (in a branch)

initialisers
	arrays and structs:
		{ { 0 }, 5, {{{2}}} }
		e.g. int a[] = { ... };
	c99 struct/union init
		{ .a = 5 }

static analysis for labels - flag unused labels

bitfields: must be ints,
can't be addressed,
nor sizeof()'d
also: struct x { int i : 1; : 3; } is valid (but not for the first field)

const:
	const char *s; - *s is not writable, s is
	const char *a = "hi";
	int x(char *s);
	x(a); // warning - removing const
	// same for assignments

32-bit code gen

general lhs assignment:
	(b ? x : y) = 5;
	^-- note: gnu extension
	(x ? a : b)(2); // similarly
	(x = y) = 2; // assign to x

__attribute__((pure))
- function with no side effects (e.g. strlen())

get rid of __asm__ hacks (mainly in gen_asm.c)

stabs/dwarf debugging annotations

fastcall - ecx, edx, stack, etc (__attribute__)

extensions:
	namespace [str] { ... }
	classes?

replace die{,_at} with cc1_&, and use stored line in tokenise for better errors

---------------------------------------------------- cpp

fix dir-relative file opening:
	cc -E dir/x.c
	doesn't work, but
	cd dir; cc -E x.c
	does

cc -MM *.c

push current_line when descending into #include/# [0-9] for cc1

macros over multiple lines
	#define a(x, y) x + y
	a(
		1,
		2
	)

---------------------------------------------------- cc

accept multiple input source files

---------------------------------------------------- lib

stdio - buffers, etc
